<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/import-this/feed.xml" rel="self" type="application/atom+xml" /><link href="/import-this/" rel="alternate" type="text/html" /><updated>2021-02-22T19:47:22-05:00</updated><id>/import-this/feed.xml</id><title type="html">import-this</title><subtitle>I talk about Python. üêç </subtitle><entry><title type="html">A journey from simple namespaces to object oriented programming</title><link href="/import-this/2021/02/17/from-simple-namespaces-to-oop.html" rel="alternate" type="text/html" title="A journey from simple namespaces to object oriented programming" /><published>2021-02-17T10:26:00-05:00</published><updated>2021-02-17T10:26:00-05:00</updated><id>/import-this/2021/02/17/from-simple-namespaces-to-oop</id><content type="html" xml:base="/import-this/2021/02/17/from-simple-namespaces-to-oop.html">&lt;p&gt;As Python developers we are constantly surrounded by objects in every program we write. Although we are always surrounded by these objects, we don‚Äôt often stop and conciously consider their importance. How did programming in langauages such as Python become object-oriented to begin with? What factors led to the object-oriented paradigm arising as the star of the show? What are the motivations which naturally compelled developers to begin organizing their code as classes and objects?&lt;/p&gt;

&lt;p&gt;In this post I will be taking the time to reflect on these motivations. We will go on a journey starting from simple namespaces and ending at the object-oriented paradigm. At each step in this journey, we will build on the previous by asking what problems might arise with our current implementation, and eventually come to the conclusion that object-oriented programming is a &lt;em&gt;natural solution&lt;/em&gt; to all of these problems. We will also get a much better appreciation for the relevance of dictionaries in Python along the way.&lt;/p&gt;

&lt;h3 id=&quot;first-things-first-namespaces-in-python&quot;&gt;First things first: namespaces in Python&lt;/h3&gt;

&lt;p&gt;To start, we must consider some ways we can create namespaces in Python. If you‚Äôre not familiar, namespaces are simply somewhere that we store mappings of names to values. The important thing to remember with namespaces is that &lt;em&gt;one namespace is never enough&lt;/em&gt;. In fact, sometimes we need a lot of namespaces to organize our logic. We have a few ways in Python to accomplish namespaces.&lt;/p&gt;

&lt;p&gt;Firstly, we could use our own dictionaries. Let‚Äôs create some dictionaries of people and map those people to their favorite bands.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/10905cff2b84b3a9829529592f6aeae2.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We have 3 namespaces above. One for just Beatles fans, one for only Rolling Stones fans, and one which combines the previous two.&lt;/p&gt;

&lt;p&gt;Dictionaries are one way to store name associated to values. But isn‚Äôt the mapping of names to values what happens every time we declare a variable in Python? If I said &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name = 'nick'&lt;/code&gt; Python has to store that mapping somewhere. And it turns out that we are always using namespaces in Python, whether we are conscious of it or not, through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt;. This global namespace is where our declared variables are stored and accessed when we reference them somewhere else. And &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt; is a dictionary itself. We can see below that I can reference the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; in the global namespace directly by simply calling the variable. But also, I can access that variable by passing it in string format as a key to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt;, like so:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/cc1185bfe3151734842aff45ffbd9bb5.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And infact, I can update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt; directly and see that change immediately by calling the variable:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8cb80968ecb55b46eb99d0bb93c04e3e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;As you probably imagined, we need a local namespace for our local scopes inside, say, a function. This local namespace is works the exact same way as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt; and is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locals()&lt;/code&gt;. In the code below, I will locally scope some variables inside of a function and print them out when the funtion is called.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/7574e2934efff664913823607744bc12.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now we have seen 3 examples of namespaces in Python so far: user-defined dictionaries, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locals()&lt;/code&gt;. In the case of our own dictionaries, we needed to access values by using square brackets and passing in a key. As for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locals()&lt;/code&gt;, we can reference them directly when we call the variable in the correct scope. Another way we can do namespaces with Python is through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;types.SimpleNamespace&lt;/code&gt;. This time, we reference values in the namespace with dot notation:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/7a1ca01d18955a1143d8253c59871a94.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;So we can see that namespaces in Python are more or less dictionaries accessed in different ways. What if I wanted to mimick the behaviour of a dictionary ourselfs to dabble in our own namespace creation?&lt;/p&gt;

&lt;h3 id=&quot;iteration-one-creating-our-own-dictionary-behaviour-manually-with-arrays&quot;&gt;Iteration one: creating our own dictionary behaviour manually with arrays&lt;/h3&gt;

&lt;p&gt;If we want to create our own mappings of names to values, then we will need to create some buckets for names (or keys) and some buckets for values. To create some buckets, we could create list of lists of size &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; to represent keys (where each imbedded list represents its own bucket). And we could do the same for values.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/fc64d9e5777b286b0fae1c3537607ba7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We will also need some way to connect the key buckets and value buckets. To do this, we could simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash()&lt;/code&gt; the key % size (the length of the lists). This will return an integer in the range of 0 to size-1 we can use to index into our buckets. Here is what that might look like:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ecae1ec3956f3f524ec5904273a3b72d.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now we can manually hash keys and values into buckets at the same index of these two lists. So we have a hacky dictionary we can play with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems with this implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Our key and value buckets are both stored in the global namespace which can quickly become cluttered with variable names. Recall that one namespace is never enough.&lt;/li&gt;
  &lt;li&gt;We have to manually create each peice of this solution (creating buckets, hashing to those buckets, and then appending to those buckets).&lt;/li&gt;
  &lt;li&gt;No modularity or extensibility in this implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An obvious next step would be to try to avoid this manual nature of our current implementation by moving logic into functions. We want to have functions to set and get items from our namespace.&lt;/p&gt;

&lt;h3 id=&quot;iteration-two-creating-our-own-dictionary-behaviour-with-functions&quot;&gt;Iteration two: creating our own dictionary behaviour with functions&lt;/h3&gt;

&lt;p&gt;Our main steps to creating and using our own namespace is to 1) initialize the key and value buckets, 2) set items at the same index within the key and value buckets by hashing the key, and 3) getting an item from the value bucket based on the key we pass. To implement and use these three steps as functions, we would move the code into functions as so:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/66b1d800cfb85ec96518ba16167b2290.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can see by looking at the code within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if __name__ == '__main__':&lt;/code&gt; block that we now have a functional way to create something which behaves like a dictionary. This is an improvement over the purely manual approach but is far from perfect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems with this implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We are still relying on the global namespace and so a variable name can only be used once.&lt;/li&gt;
  &lt;li&gt;If we continue this way, we will pollute the global namespace quickly and run into name collisions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The core issue is that one namespace is not enough. A potential sollution would be to take this same functional approach we laid out above, but instead of relying on the global namespace, we initialize a smaller namespace within globals, a new dictionary, and populate that instead.&lt;/p&gt;

&lt;h3 id=&quot;iteration-three-creating-our-own-dictionary-behaviour-with-subdictionary-namespaces&quot;&gt;Iteration three: creating our own dictionary behaviour with subdictionary namespaces&lt;/h3&gt;

&lt;p&gt;You will see in the code below that the only thing I am really changing is that I am creating a new namespace each time I want to model the behaviour of a dictionary, storing values such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_buckets&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value_buckets&lt;/code&gt; in that namespace instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt;. Notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize_buckets()&lt;/code&gt; now takes a namespace which already has a size stored. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_item()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_item()&lt;/code&gt; also take this namespace as an argument.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/b7c3b5cf246119f7a9a5e98fecd10230.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;With this implementation, everytime we initialize our buckets we are creating our own namespace in the form of a new dictionary. This makes polluting the global namespace more difficult. This is what ournamespace looks like:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a882dcb741b4709e14e187f0e7d1c7fc.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Although we now have the ability to work with many namespaces, this approach still isn‚Äôt perfect (albeit very useful).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems with this implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Clunky, we ideally do not want to access values from each of our namespaces like we do with dictionaries (square bracket notation).&lt;/li&gt;
  &lt;li&gt;Not Pythonic: if our code is constantly filled with brakcets and strings, it will be ugly. Does this matter in Python? Absolutely. The very first line of the Zen of Python states ‚Äúbeautiful is better than ugly‚Äù.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better way would be to use dot notation. So instead of saying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespace[&quot;key&quot;]&lt;/code&gt; we would like to say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespace.key&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;iteration-four-creating-our-own-dictionary-behaviour-with-simplenamespace&quot;&gt;Iteration four: creating our own dictionary behaviour with SimpleNamespace&lt;/h3&gt;

&lt;p&gt;Again the code will barely change. Now, instead of using a dictionary everytime we want to create a namespace, we will use SimpleNamspace instead. Recall that SimpleNamespace let‚Äôs use use this dot notation we want.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/e296dbe105ad8670895007c2f7e23386.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now the notation of accessing values in our namespace is much nicer. But you might have noticed that this solution is not fully automated. In fact, there are a couple glarring problems:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems with this implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We need to manually create new SimpleNamespaces every time we need a namespace.&lt;/li&gt;
  &lt;li&gt;We need to pass that namespace to each single function call, causing a lot of repetitive code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will now see that the solution to this problem is to use Python classes.&lt;/p&gt;

&lt;h3 id=&quot;iteration-five-creating-our-own-dictionary-behaviour-with-our-own-python-class&quot;&gt;Iteration five: creating our own dictionary behaviour with our own Python class&lt;/h3&gt;

&lt;p&gt;When writing the same example as a Python class, notice that all I am changing is that the indentation is different and I am passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; instead of the namespace (like I did before). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; refers to the instance itself, which I called ‚Äúnamespace‚Äù. There is no place where I am initializing a builtin dict nor a SimpleNamespace. The variable ‚Äúnamespace‚Äù becomes the actual namespace directly this time. Our class builds a new namespace for us when we instantiate it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2e85e2be29123a5289ba861efba4f8a3.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Notice above that instead of passing the namespace as the first argument to each function call, when I use the class methods above (accessed with dot notation) the namespace is passed implicitly via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;. We do not need to actually specify the namespace directly every time. Everything except for this detail is identical to the functional implementation which came before it.&lt;/p&gt;

&lt;p&gt;Although this implementation is great, it is not perfect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems with this implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We have to call method names every time to set and get items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, when we initialize our buckets, set items in our buckets, and get items from our buckets, we do not want to write the entire method name out. We want this to happen automatically and share a common protocol with other objects.&lt;/p&gt;

&lt;h3 id=&quot;iteration-six-creating-our-own-dictionary-behaviour-with-dunder-methods-and-operator-protocols&quot;&gt;Iteration six: creating our own dictionary behaviour with dunder methods and operator protocols&lt;/h3&gt;

&lt;p&gt;If you are not familiar with the operator protocol of Python, I highly recommend you read a previous post I made which explains it: &lt;a href=&quot;https://nhopewell.github.io/import-this/2021/02/16/python-is-a-protocol-language.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Python is a protocol-based language&lt;/strong&gt;&lt;/a&gt;. It is important to understand this protocol behaviour to understand how dunder methods work.&lt;/p&gt;

&lt;p&gt;Essentially, we want to overload some special methods which the Python core developers have implemented so we can interact with Pythons operator protocol (called ‚Äúdunders‚Äù because they are surrounded by double underscores). In our case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize_buckets()&lt;/code&gt; will become the dunder method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_item()&lt;/code&gt; will become &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__setitem__()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_item()&lt;/code&gt; will become &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getitem()__&lt;/code&gt;. To understand more about these special items, read about them in the &lt;a target=&quot;_blank&quot; href=&quot;https://docs.python.org/3/reference/datamodel.html&quot;&gt;Python Data Model docs.&lt;/a&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/649d46669216f762788abab764d3a426.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;You can now see that we are directly recreating the builtin dict by mimicking the behaviour of initializing, as well as getting and setting new items. The behaviour Python expects the user to input in order to create, mutate, and access our new class is exactly the same as what is expected by real dictionaries. &lt;em&gt;This&lt;/em&gt; consistency is what makes it an operator protocol.&lt;/p&gt;

&lt;p&gt;We now have solved all of our previous problems and have a very consistent interface. And it turns out, this system comes with a lot of great side effects we won‚Äôt discuss here. By following each iteration, we solved some problems and created new ones. Slowly, we built up to the final solution in iteration six. This solution is how Object-Oriented programming is implemented in Python. Hopefully this style of programming now feels natural to you and you have a better appreciation for it.&lt;/p&gt;

&lt;p&gt;You also hopefully have a better appreciation for how poweful dictionaries are in Python. We can completely mimick the behaviour of classes and methods with dictionaries and functions. You might think it‚Äôs strange to use dictionaries like this at first. But in Python, most important things are dictionaries. Like we mentioned before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locals()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SimpleNamespace&lt;/code&gt; are all represented as dictionaries. And as we have seen, classes in Python have a lot of similarities to dictionaries. The actual module I am writing this code in can be represented as a dictionary itself. If you have ever run a debugger on a python module you‚Äôll see that special variables such as the name of the file, its location, its package name etc., are all stored as key, value pairs.&lt;/p&gt;</content><author><name></name></author><summary type="html">As Python developers we are constantly surrounded by objects in every program we write. Although we are always surrounded by these objects, we don‚Äôt often stop and conciously consider their importance. How did programming in langauages such as Python become object-oriented to begin with? What factors led to the object-oriented paradigm arising as the star of the show? What are the motivations which naturally compelled developers to begin organizing their code as classes and objects?</summary></entry><entry><title type="html">Python is a protocol-based language</title><link href="/import-this/2021/02/16/python-is-a-protocol-language.html" rel="alternate" type="text/html" title="Python is a protocol-based language" /><published>2021-02-16T10:26:00-05:00</published><updated>2021-02-16T10:26:00-05:00</updated><id>/import-this/2021/02/16/python-is-a-protocol-language</id><content type="html" xml:base="/import-this/2021/02/16/python-is-a-protocol-language.html">&lt;p&gt;In this post I am going to briefly explain a bit of a mental model which helped me think about Python programming when I was first learning the language.&lt;/p&gt;

&lt;p&gt;When creating, extending, and using classes and objects in Python, there is always some top-level protocol which calls some underlying code to handle how the protocol behaves. When new Python developers start coding, they are constantly interacting with these protocols even without realizing at first.&lt;/p&gt;

&lt;p&gt;What I mean by ‚Äútop-level protocol‚Äù is that we write some code to interact with objects we are interested in working with. Perhaps we call an object which runs some code, maybe we initialize a new variable which points to a Python object, maybe we ask the length of an object with the builtin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len()&lt;/code&gt;, or add two objects with the builtin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add()&lt;/code&gt;, maybe we want to index into an item with square brackets [], etc. There is some top-level behaviour we perform in our scripts that calls some underyling code which dictates the behaviour of our actions.&lt;/p&gt;

&lt;p&gt;To hide the internal behaviour at first, imagine I created a new class called a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TalkingDictionary&lt;/code&gt; which spike back to me every time I interacted with it in some way. Imagine this new class is stored in a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;talking_dict.py&lt;/code&gt;. Let‚Äôs import it, start writing some of these top-level interactions, and see how the protocol behaves. The commented out parts of the code snippets below are the output.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a9865f8398e88f50e29487688a137879.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can see above that we initialized a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TalkingDictionary&lt;/code&gt; instance and set a few keys (first and last). Each time we did that, we had the dictionary talk back to us letting us know that it was setting the keys to the values we provided.&lt;/p&gt;

&lt;p&gt;Let‚Äôs try some other interactions, what if we ask for the value of a key just to be sure it was set correctly:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/3d837024d3377a422368792a0e53ea6a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The dictionary talked back to us again and let us know what the value of the first key was when it found it. Let‚Äôs continue. What if we wanted to print the dictonary:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/5406a22deada7cf59c8ee86df92a95ce.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This is an example of using a builtin function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; to interact with our new object. This is another example of that top-level protocol I was talking about. Let‚Äôs look at another protocol. Let‚Äôs ask if the key ‚Äòfirst‚Äô is contained in the dictionary.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1a24376ced4b846e4c8a847a33a3323e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We know ‚Äòfirst‚Äô is in the dictionary, we set it just a moment ago. But according to our talking dict, it‚Äôs not in there. This is because we overloaded a special method of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TalkingDictionary&lt;/code&gt; to return False all the time no matter what the user asks for. In fact, we have overloaded numerous special methods whic dictate the behaviour of the protocol. Let‚Äôs try asking for a key that is not in the dictionary.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/09c64e5e3ebfa4285b35de2f32ed2c81.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;When we ask for the value of the key ‚Äòmiddle‚Äô, which is not contained in our dictionary, you can tell that at some point it is calling the same code which was called when we accessed the key ‚Äòfirst‚Äô because it prints out the message ‚ÄúLet me find that for you‚Ä¶‚Äù. And just after a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; is raised with the message ‚ÄúYou‚Äôre looking for ‚Äòmiddle‚Äô but it ain‚Äôt here.‚Äù So at least 2 distinct peices of code were called in this interaction even though we only asked for one key.&lt;/p&gt;

&lt;p&gt;What is we tried to call our talking dictionary as if it were a function.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1538a187dff04baa64ed392ba558ad85.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Notice that simply adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; to the end of our instance is itself one of these top-level protcols between the user and the underlying class. These ending braces are calling code behind the scenes.&lt;/p&gt;

&lt;p&gt;Finally, let‚Äôs use on more builtin function and ask for the length of our dictionary.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/3ab0c33418856969bad65a49c8693bd0.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;So we can see that each of our interactions with this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TalkingDictionary&lt;/code&gt; class has some associated behaviour which is predetermined by a protocol (the code which links our actions to whatever Python outputs back to us). It turns out that all of these interactions, getting a key, setting a key, asking if a key is in the dictionary, printing the instance, asking for its length, ect., are calling methods under the namespace of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TalkingDictionary&lt;/code&gt; which explain why our instance behaves as it does. I defined all of these methods by inheriting from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict&lt;/code&gt;, the basic Python dictionary, and overloading the behaviour myself.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TalkingDictionary&lt;/code&gt; class:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/4c202b6286239d0d8d5b8182c3c4c434.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Looking at the class above, you can see which methods handle the top-level protocols we initiated in our examples. Setting a new key, like we did when we set ‚Äòfirst‚Äô to ‚ÄòNick‚Äô called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__setitem__()&lt;/code&gt; which printed a message and then called the same method from its parent, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict&lt;/code&gt;, to actually set the key, value pair. When we asked for the value of ‚Äòfirst‚Äô, our instance called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getitem__()&lt;/code&gt; which did a similar thing. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print()&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__repr__()&lt;/code&gt;. Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; operator called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__contains__()&lt;/code&gt;. Attempting to access a key which did not exist, ‚Äòmiddle‚Äô, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__getitem()__&lt;/code&gt; first, which printed out the message ‚ÄúLet me find that for you‚Ä¶‚Äù and then when it discovered that middle was not a key in our dictionary, it called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__missing__()&lt;/code&gt; which raised a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeyError&lt;/code&gt;. When we called our instance by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; to the end, it called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__()&lt;/code&gt;. And finally, when we called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len()&lt;/code&gt; on our instance, it called the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__len__()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this is completely new to you, you might wonder why these special methods have leading and trailing double underscores. In Python, these special methods are called ‚Äúdunders‚Äù (double underscore) and are methods whose novel implementation is strictly reserved for the core Python developers, but are supposed to be overloadded by the user. In other words, never implement your own dunder method, but feel free to alter their behaviour in the classes you create if neccessary.&lt;/p&gt;

&lt;p&gt;These methods and protocols, and many more, are explained in detail in the &lt;a target=&quot;_blank&quot; href=&quot;https://docs.python.org/3/reference/datamodel.html&quot;&gt;Python Data Model docs.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps new Python developers arrive at a clear mental model for this protocol-based nature of Python.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this post I am going to briefly explain a bit of a mental model which helped me think about Python programming when I was first learning the language.</summary></entry><entry><title type="html">‚Äòy walrus z‚Äô: when and why should you use assignment expressions?</title><link href="/import-this/2021/02/15/when-and-how-to-use-assignment-expressions.html" rel="alternate" type="text/html" title="‚Äòy walrus z‚Äô: when and why should you use assignment expressions?" /><published>2021-02-15T10:26:00-05:00</published><updated>2021-02-15T10:26:00-05:00</updated><id>/import-this/2021/02/15/when-and-how-to-use-assignment-expressions</id><content type="html" xml:base="/import-this/2021/02/15/when-and-how-to-use-assignment-expressions.html">&lt;p&gt;Assignment expressions, also known as the walrus operator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y := z&lt;/code&gt;) was a proposal in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0572/&quot; target=&quot;_blank&quot;&gt;PEP 572&lt;/a&gt; by . The expression above is pronounced ‚Äú&lt;em&gt;y walrus z&lt;/em&gt;‚Äù, and it allows you to assign values to variables as part of larger expressions where, before Python 3.8, you previously could not. By the way, it‚Äôs called the walrus operator because it looks like the eyes and tusks of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168).jpg&quot; target=&quot;_blank&quot;&gt;walrus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the time, the walrus operator was met with a lot of controversy. During the proposal of the walrus operator in PEP 572, some people argued that assignment expressions were bad and not Pythonic. These people really pushed back and claimed that &lt;em&gt;they&lt;/em&gt; knew what was Pythonic and what was not. ‚ÄúAssignment expressions are NOT pythonic!‚Äù they exclaimed loudly.&lt;/p&gt;

&lt;p&gt;When PEP 572 was proposed, Guido Van Rossum was the BDFL (Benevolent Dictator For Life) of Python. And he disagreed with them. He believed that the walrus operator was a good addition and that it was, in fact, very Pythonic. He ought to know‚Ä¶ He created the language after all. Guido went ahead and approved PEP 572, including the walrus operator.&lt;/p&gt;

&lt;p&gt;But by then the oppinions of the contributing Python developers had added a lot of stress and difficulty to Guidos life. He knew this was not the first time he had faced such opposition, and certaintly not the last time either. He decided it was time to let others handle the job. Guido promptly stepped down as BDFL the very next morning.&lt;/p&gt;

&lt;p&gt;This makes the walrus operator one of the most interesting and important PEP proposals in Pythons history. So let‚Äôs look into assignment expressions and make our own conclusion: was Guido right? Or was his opposition right? Is the walrus operator any good?&lt;/p&gt;

&lt;p&gt;As previously stated, the walrus operator allows the developer to assign values to variables in places where assignment was previously not allowed. The most common being within an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement. Let‚Äôs look at some common patterns and use cases which could benefit from the walrus operator. By common patterns I mean scenarios which frequently come up during development.&lt;/p&gt;

&lt;h3 id=&quot;pattern--1&quot;&gt;Pattern # 1&lt;/h3&gt;
&lt;p&gt;The first common pattern involves any circumstance we need to read from a variable, check if its value is non-zero, and then use that value. Let‚Äôs pretend we work at a burrito shop and we are serving customers. First, let‚Äôs initialize the current stock of our different burritos:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/e41ee3542a5ab8226e4ed8cced150a3b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Let‚Äôs say a customer comes in and wants to buy a beef burrito. First, we need to check if we have a beef burrito to sell, and if we do, we can make it up for her/him to eat. We could do this by getting count of our current stock of beef burritos and then checking for a non-zero value with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9581865e2e2c5d035dfadcc9de5a8464.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can see this code may be misleading because it‚Äôs easy to assume that the count variable is accessed in both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; branches. Because count is declared at the top, but is only used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; branch, we might mistake it for being more important than it actually is.&lt;/p&gt;

&lt;p&gt;Assignment expressions make this exact scenario cleaner. Here is the same example with the walrus operator:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/261c4f717941c71442dc3ae35ee1a73b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now it becomes very clear where the count variable is being used. It is more obvious at a glance that count is relevant to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement. This two step process of assigning and then evaluating is the core concept behind the walrus operator.&lt;/p&gt;

&lt;p&gt;If we continue with this scenario, let‚Äôs pretend to make one veggie burrito we need 2 rations of veggies instead of just one. We would now need to do a comparison inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement. Without the walrus operator, that would look like this:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/dc4a6742e08db9e3f1ae9c9e505f1ad4.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This presents the same problem of over emphasizing the count variable. We can clean this up again by making it clear where count is important with the walrus operator:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/eeebf5f5599d18738282d62bc64bea81.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It is important to note that when our assignment expression is a subexpression of a larger expression, like above, we need to wrap it in parentheses. In any case where we do not need the parentheses they should be dropped entirely. This goes for any subexpression in Python, not only ones which contain the walrus operator.&lt;/p&gt;

&lt;h3 id=&quot;pattern--2&quot;&gt;Pattern # 2&lt;/h3&gt;
&lt;p&gt;The second common pattern, which is similar to the first pattern, involves anytime we want to assign a value to a variable depending on some condition, and then use that variable in a function call right after. Let‚Äôs continue with the veggie burrito customer. Let‚Äôs say in order to fulfill the order I need the 2 portions of veggies (like before) to be sliced up, and if we don‚Äôt have enough veggies to slice, I want to raise an OutOfVeggies exception. Here is a way to implement this scenario without the walrus operator:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bfe070d4b296e7690b0ddd739ac61c56.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now we can see the potential confusion really begin to arise. We see slices and count initialized above the branching logic, and at first glance we might think they are both important to all the logic below. In reality, only slices is important outside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; condition, count is only used in the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slice_veggies()&lt;/code&gt;. Let‚Äôs rework with with the walrus operator:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/fb27ee15f5983580c9555aa6de1e47cf.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now it is much more clear that slices is relevant to all the logic below the line where it is declared, and count is only important to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement. At a glance, we understand the scope of importance of these two variables and any room for ambiguity has gone away.&lt;/p&gt;

&lt;h3 id=&quot;pattern--3&quot;&gt;Pattern # 3&lt;/h3&gt;
&lt;p&gt;The third common pattern involves scenarios where a switch/case statement might be a programmers first choice when tackling some sub problem they face, but she/he cant‚Äô use one because Python does not support switches (as of yet). Typically, Python developers handle this with nesting multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elif&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Let‚Äôs pretend that we want to automate buritto making for our non-meat eating customers. We can see that 3 of our options in our stock do not contain meat. These are veggie, black bean, and tofu burritos. Let‚Äôs say that we know veggie is the most popular, then black bean, then tofu. And each of these options requires a different amount of each ingredient to make. Our system might look like this:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ea7983fd6619edc506c829d17a9dfc99.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This type of nested code is quite common in Python because of the lack of a switch statement. But when we clean this up with the walrus operator, it almost feels like we are suddenly using a switch statement:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f08f86453470301aac49c8d11c2e50c1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We have stripped out all the nesting statements and it is obvious now what is happening in this bit of code. In situations where ugly nested branching logic is showing up in your code, it is probably worth your time to consider reimplementing the logic using assignment expressions.&lt;/p&gt;

&lt;p&gt;That being said, it was recently announced that &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/gvanrossum/patma&quot;&gt;switch statements will be coming to Python soon&lt;/a&gt;. This proposal has been approved as of &lt;a href=&quot;https://www.python.org/dev/peps/pep-0634/&quot; target=&quot;_blank&quot;&gt;PEP 634&lt;/a&gt;. It seems the Python switch will be much more powerful than switch implementations in other languages like C#. If you‚Äôre reading in the future, maybe this has already been released. I imagine these proper switch statements will be the preferred solution to this common pattern we just discussed.&lt;/p&gt;

&lt;h3 id=&quot;pattern--4&quot;&gt;Pattern # 4&lt;/h3&gt;
&lt;p&gt;The fourth and final pattern involves any scenario a Python developer writes a ‚Äú&lt;em&gt;loop-and-a-half&lt;/em&gt;‚Äù in their code to make up for the lack of a do-while loop in the language.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say I want to make burritos until I am out of ingredients:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/406471b828a3f7f132f2cb5c3316764e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The obvious repetition above involves the two calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_ingredients()&lt;/code&gt;. We call it once before the while loop and then again at the end of the while loop to either restock the ingredients or break out of the loop.&lt;/p&gt;

&lt;p&gt;One common way Python developers try to avoid this repetition is to use a ‚Äú&lt;em&gt;loop-and-a-half&lt;/em&gt;‚Äù. This strategy will get rid of the repetition but will make the while loop a simple infinite loop controlled by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt; statement. Something we try to avoid. It is called a loop and a half because we execute half the code in the loop before exiting, instead of checking a proper condition first, thus never starting the terminal iteration to begin with.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/22367d27a0cb1efbd0b9f6bf8c939eb1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can avoid this awkward inifite loop with a break strategy with the walrus operator. Because the walrus operator allows us to assign a value in a conditional check, we do not need to initize ingredients before the loop, calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_ingredients()&lt;/code&gt; twice. Nor do we need to implement a forever loop with a break statement. Instead we can reassign the ingredients variable and check it at each pass of the loop:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/17f0ada3883002c679e8a43e53ad6b9b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can see in this example that it‚Äôs hard to argue that the walrus operator did not clean up this code. This is clean and Pythonic and does not require any ugly tricks.&lt;/p&gt;

&lt;p&gt;Now we have seen 4 common patterns where the walrus operator comes in handy. So far, we are making a really strong case for assignment expressions. That being said, perhaps you are not convinced yet that there is real value in the walrus. I want to go over one more important area where the walrus operator is a nice addition.&lt;/p&gt;

&lt;h3 id=&quot;using-the-walrus-operator-in-comprehensions-to-keep-code-dry&quot;&gt;Using the walrus operator in comprehensions to keep code DRY&lt;/h3&gt;

&lt;p&gt;We all know what DRY means: Don‚Äôt Repeat Yourself. The idea is that if we are copy and pasting code, we probably should clean it up. Let‚Äôs say I am selling flowers at a flower shop and customers are buying flowers in batches of 8. To sell the flowers in these batches, I first want to see how many batches of 8 I can support from my total stock for each flower ordered:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/4d23303f93c12e82d52351598a0252c6.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We could instead attempt write this more Pythonically with a dictionary comprehension:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/57959f44c6c0dbd259388671ca11741c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This code really is not much better because the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_flower_batches()&lt;/code&gt; happens twice and it takes away from the readability of the code overall. This code would also not act as expected if we changed the actual parameters input to one of the two function calls but not the other.&lt;/p&gt;

&lt;p&gt;The walrus operator can solve this problem:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/716a930c9be1f8c9375ab79f19b4d52e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now our code looks really DRY. But is it better? To a long time Python developer the answer is probably yes. To someone who is newer to Python the answer might be no. This might look too cryptic to someone who is not used to this syntax.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Calling back to the original question: who was right about assignment expressions being a good addition, Guido or the critics? Let‚Äôs make a conclusion. We saw that there a number of instances where the walrus operator does improve readability. We could tell in our branching examples that it was clearer how to mentally scope some of our variables at a glance when we incorporated the walrus operator. And in our dictionary comprehension example, we can see that the walrus operator helped us keep our code DRY. On the other hand, some devs might find code which makes use of assignment expressions a bit too cryptic. They might say that such code is not what ‚ÄòPythonic‚Äô code is supposed to read like.&lt;/p&gt;

&lt;p&gt;For me personally, I think Gudio was right. It is a good additon &lt;em&gt;when used correctly&lt;/em&gt;.  One caveat, mentioned by Python core developer &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/raymondh?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;Raymond Hettinger&lt;/a&gt; in the docs &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.8.html&quot; target=&quot;_blank&quot;&gt;‚ÄòWhat‚Äôs New in Python 3.8‚Äô&lt;/a&gt;, is that we should:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Try to limit use of the walrus operator to clean cases that reduce complexity and improve readability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in conclusion: there are places we ought to make the most of the walrus, but don‚Äôt go wild with it either. Be sensible. Be Pythonic.&lt;/p&gt;</content><author><name></name></author><summary type="html">Assignment expressions, also known as the walrus operator (y := z) was a proposal in PEP 572 by . The expression above is pronounced ‚Äúy walrus z‚Äù, and it allows you to assign values to variables as part of larger expressions where, before Python 3.8, you previously could not. By the way, it‚Äôs called the walrus operator because it looks like the eyes and tusks of a walrus</summary></entry><entry><title type="html">itertools.zip_longest() saves lives</title><link href="/import-this/2021/02/14/itertools.zip_longest-saves-lives.html" rel="alternate" type="text/html" title="itertools.zip_longest() saves lives" /><published>2021-02-14T10:26:00-05:00</published><updated>2021-02-14T10:26:00-05:00</updated><id>/import-this/2021/02/14/itertools.zip_longest-saves-lives</id><content type="html" xml:base="/import-this/2021/02/14/itertools.zip_longest-saves-lives.html">&lt;p&gt;We know how great &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip()&lt;/code&gt; is for processing multiple iterators in parrallel. If I have a list of names and another list of the
lengths of those names, I can iterate over both lists at once like so:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/da23e55bcd0e52dfedf3739c8254dc0c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;One important issue which can come up when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip()&lt;/code&gt; is that it stops yeilding results once it reaches the length of the smallest list. So if I add another name to the names list, but don‚Äôt add an accompanying length to the names_lengths list, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip()&lt;/code&gt; will stop once it has exhausted the names_lengths list:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/de5311e94c35e384c95e13439e42e1c0.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Where is Sarah? Is she gone? did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip()&lt;/code&gt; kill Sarah?!?!&lt;/p&gt;

&lt;p&gt;This behaviour is fine most of the time because we often want to iterate through one list along with a second list which was derived from the first (such as a list of lengths). But sometimes we want to iterate through both until we exhaust the longest list (not killing poor Sarah).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itertools.zip_longest()&lt;/code&gt; comes to the rescue in these situations. It yeilds results until it exhausts the longest list. Here is zip_longest at work with our lists of different lengths:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c01e0150376a6c8ed5be3029fa14cf25.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And there we go, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itertools.zip_longest()&lt;/code&gt; saved Sarah!&lt;/p&gt;

&lt;p&gt;Notice above that we probably don‚Äôt want to print ‚Äúsarah is length None‚Äù. Sarah does have a length, Python just doesn‚Äôt know what it is in this situation. In these cases, we want to provide a value to the optional argument &lt;em&gt;fillvalue&lt;/em&gt;, which defaults to None.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/e2e7e28242953cb7469fdbc35d5be604.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itertools.zip_longest()&lt;/code&gt; is roughly equivalent to:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/83cd83811662a4c7f9a5cbb8ad2a16ae.js&quot;&gt; &lt;/script&gt;</content><author><name></name></author><summary type="html">We know how great zip() is for processing multiple iterators in parrallel. If I have a list of names and another list of the lengths of those names, I can iterate over both lists at once like so: 400: Invalid request</summary></entry><entry><title type="html">Yielding tuples: pythonic looping</title><link href="/import-this/2021/02/13/pythonic-looping.html" rel="alternate" type="text/html" title="Yielding tuples: pythonic looping" /><published>2021-02-13T10:25:00-05:00</published><updated>2021-02-13T10:25:00-05:00</updated><id>/import-this/2021/02/13/pythonic-looping</id><content type="html" xml:base="/import-this/2021/02/13/pythonic-looping.html">&lt;p&gt;You‚Äôve probably realized that Pythons most common for loop is actually a foreach loop. A foreach loop does not keep track of any counter. It says ‚Äúdo something for each item in this collection‚Äù rather than ‚Äúdo something x number of times‚Äù like a traditional for loop does. If you have an iterable data structure that you want to iterate through, you can loop over its items directly like so:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/560646bba2fb8823345dc5dc33424af7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range()&lt;/code&gt; is a builtin which is nice for looping over a sequence of integers easily:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/6fa793afa6c64ab290fe403f4721d4e4.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;But its quite common to want to loop over all the items in a list while also keeping track of the index of each item. A non-pythonic
way to do this is to use range (which is meant for looping over integers) like so:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/386a28bf781694c6740eb3ca3961e505.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This is needlessly clunky. We need to compute the length of the array and index into the array. As a rule of thumb, Pythonic syntax is beautiful and expressive. If the code looks clunky, it‚Äôs usually not the Pythonic way of doing things. Python does have a builtin specifically designed for this task: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enumerate()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enumerate()&lt;/code&gt; &lt;strong&gt;will wrap any iterator with a lazy generator&lt;/strong&gt; which will yield tuples each time next is called. The tuples that enumerate yields are the index of the item and the item itself. Like this: (index, item). We can keep calling next on our names list directly to see this in action:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/5b57ab2714a1b52f3610951eb7079b16.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can use a for loop to call next until stop iteration occurs, each loop yeilding these tuples, like so:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/00ac37af9f776830ee400722f854581c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And something that many Python developers forget is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enumerate()&lt;/code&gt; &lt;strong&gt;takes a second argument&lt;/strong&gt; which is the index to start with:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/217b6991dada6fb3cda7f3c8a45339be.js&quot;&gt; &lt;/script&gt;</content><author><name></name></author><summary type="html">You‚Äôve probably realized that Pythons most common for loop is actually a foreach loop. A foreach loop does not keep track of any counter. It says ‚Äúdo something for each item in this collection‚Äù rather than ‚Äúdo something x number of times‚Äù like a traditional for loop does. If you have an iterable data structure that you want to iterate through, you can loop over its items directly like so:</summary></entry><entry><title type="html">Lists are not Arrays</title><link href="/import-this/2021/02/12/lists-are-not-arrays.html" rel="alternate" type="text/html" title="Lists are not Arrays" /><published>2021-02-12T10:25:00-05:00</published><updated>2021-02-12T10:25:00-05:00</updated><id>/import-this/2021/02/12/lists-are-not-arrays</id><content type="html" xml:base="/import-this/2021/02/12/lists-are-not-arrays.html">&lt;p&gt;I often hear new Python devs who come from other languages refer to Python lists as arrays. 
At first glance, this is not a big deal. Lists do behave just like arrays on the surface. They are both sliced in the same way, they are both accessed in the same way, they can both be extended and appended to in the same way, etc. But there are some very key differences between the two.&lt;/p&gt;

&lt;p&gt;The first difference is that lists can hold heterogenous data types. This means I can make a list mixed with ints, strings, and nested lists, like this one :&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/d164f929565c6bbbe6f4c7c24ac3b13e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This makes lists are more flexible than arrays as arrays are restricted to containing a single data type (usually ints or floats). But, this flexibility results in lists using a lot more memory than arrays.&lt;/p&gt;

&lt;p&gt;The flexibility of lists is so nice that some Python devs do not even know that Python has a C-style array, always opting for a list data structure instead.&lt;/p&gt;

&lt;p&gt;Here is how a double type array is allocated (the first argument denotes the type):&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/269dd5731950d04838c78e2370e5307d.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Under the hood, lists and arrays are represented differently in memory. An array pointer points to the head of the array itself (the address of the first element of the array). And the array itself is a contiguous set of elements in memory. So just like an array in C, if we have a pointer to the head, along with the length of the array, we can easily operate on that array.&lt;/p&gt;

&lt;p&gt;Lists, on the other hand, do not contain elements which are contiguously arrange in memory. Instead, a list points to the head of a block of pointers. Each pointer in this block points to a complete Python object somewhere else in memory (each member of the list).&lt;/p&gt;

&lt;p&gt;This is shown below:
&lt;img src=&quot;../../../images/list_vs_array.png&quot; alt=&quot;list_pic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By pointing to the head of a pointer block, Python lists give the illusion of being contiguous in memory even though they do not have to be arranged as so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So when should I use a list? When should I use an array?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Good question. Because lists do not need to be contiguous in memory nor of the same type, new elements can be appended very efficiently. If you believe your data structure will grow and shrink a lot, it makes sense to use a list. You should also use a list if you need to store many different data types.&lt;/p&gt;

&lt;p&gt;Arrays might be better to use if you need to store a large amount of one data type (typically numeric) and need to do computationally heavy math operations on the data. If you need to do a lot of math, I would recommend using the Numpy array as it is the most optimized data structure for this sort of task. The Numpy array is the data structure core to most Python machine learning libraries (which have to do a lot of linear algebra), and are the building blocks of the Pandas dataframe.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/124454c4d8298b42852ab2abda729965.js&quot;&gt; &lt;/script&gt;</content><author><name></name></author><summary type="html">I often hear new Python devs who come from other languages refer to Python lists as arrays. At first glance, this is not a big deal. Lists do behave just like arrays on the surface. They are both sliced in the same way, they are both accessed in the same way, they can both be extended and appended to in the same way, etc. But there are some very key differences between the two.</summary></entry><entry><title type="html">The ‚Äòis‚Äô operator and the interpreter</title><link href="/import-this/2021/02/11/the-is-operator.html" rel="alternate" type="text/html" title="The ‚Äòis‚Äô operator and the interpreter" /><published>2021-02-11T10:25:00-05:00</published><updated>2021-02-11T10:25:00-05:00</updated><id>/import-this/2021/02/11/the-is-operator</id><content type="html" xml:base="/import-this/2021/02/11/the-is-operator.html">&lt;p&gt;The Python code below evaluates to True given a value of 256, but False when given a value of 257. But why?&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c14ef005ab1c427c77d8facda14ca709.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;First, let‚Äôs talk about what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; actually‚Ä¶is.&lt;/p&gt;

&lt;p&gt;Unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; which compares &lt;em&gt;values&lt;/em&gt; for equality, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; operator checks if both operands refer to the same object.  In other words, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is&lt;/code&gt; checks if the identity of both operands match or not. You can check this yourself with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id()&lt;/code&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/54fdb77b19f2b4280c345408f07106d4.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can see that these variables x and y are pointing to the same object in memory (they both have the same ids). This still does not make a lot of sense. If we do the same with a value of 257 given to x and y, we see that their ids are not the same anymore.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/8a4649abe8b806c6d4959606d1faf0d9.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;So what‚Äôs going on here?&lt;/p&gt;

&lt;p&gt;The answer is that 256 is already an object when you launch python, while 257 is not. You can read this in the &lt;a href=&quot;https://docs.python.org/3/c-api/long.html&quot;&gt;documentation&lt;/a&gt;. It states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So when we say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x = 256&lt;/code&gt; we are giving x a reference to an existing object. If we do the same for y, we get the same reference. But this is not true when we assign an integer to x or y which is outside of this range (-5 to 256).&lt;/p&gt;

&lt;p&gt;So why are only numbers from -5 to 256 stored as objects when you start Python? Simply because these are common numbers which are used a lot. It makes sense to have them already floating around for use.&lt;/p&gt;

&lt;p&gt;When we assign 257 to y right after assigning 257 to x, the interpreter does not know that we just created an integer with a value of 257, so it goes ahead and creates another object (with a different id). The same thing happens with immutable objects. Because lists are mutable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[] is []&lt;/code&gt; with always return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; but if we do the same with empty tuples (which are immutable), we see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;() is ()&lt;/code&gt; will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But it gets even more interesting when we &lt;strong&gt;initialize two variables with the same value on the same line&lt;/strong&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/d860b6f09e005ed679735d40d38d705c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now, for some reason, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x is y&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; when both are given a value of 257. Which was not the case when we assigned 257 to these variables on different lines.&lt;/p&gt;

&lt;p&gt;Like previously mentioned, when we set x and y to 257 on different lines, the interpreter doesn‚Äôt know we already created this object in memory and so a new one is created. But, when we do this all on one line, Python creates a new object AND references the second variable (y) at the same time. Thus giving both x and y a reference to the same object with the same id. Which explains why the is operator acts like it does.&lt;/p&gt;

&lt;p&gt;The explaination for this is one of optimization within an interactive environment (like a repr). When 2 lines are entered into the interpreter they are handled separately, and optimized separately. If you tried to reconstruct this experiment within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; file and run it, this behaviour would not happen. It wouldn‚Äôt happen because the optimization outside of an interactive environment, such as running an entire script, works holistically.&lt;/p&gt;</content><author><name></name></author><summary type="html">The Python code below evaluates to True given a value of 256, but False when given a value of 257. But why?</summary></entry></feed>